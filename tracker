# tracker.py
# Stock Price Tracker – robust mit yfinance, pandas, matplotlib
# Lädt Kurse, berechnet Moving Averages (20/50), speichert CSV, zeigt Chart.

import sys
from datetime import datetime, timedelta

import yfinance as yf
import pandas as pd
import matplotlib.pyplot as plt


def fetch_stock_data(ticker: str = "AAPL", days: int = 180) -> pd.DataFrame:
    """
    Robustes Laden von Kursdaten über yfinance.
    Nutzt Ticker().history(), normalisiert Spaltennamen und stellt sicher,
    dass eine Spalte 'Close' existiert.
    """
    if days <= 0:
        raise ValueError("Days must be positive.")
    period = f"{days}d"

    t = yf.Ticker(ticker)
    df = t.history(period=period, auto_adjust=True)  # Adjusted Preise in 'Close'

    if df is None or df.empty:
        raise ValueError(f"Keine Daten für Ticker '{ticker}' gefunden.")

    # Spalten in einfache Strings bringen
    def _norm(col):
        if isinstance(col, tuple):
            col = "_".join([str(c) for c in col if c is not None])
        return str(col).strip()

    df = df.copy()
    df.columns = [_norm(c) for c in df.columns]

    # Mappe mögliche Schreibweisen auf Standard
    rename_map = {}
    lower_map = {c.lower(): c for c in df.columns}
    for candidate in ["open", "high", "low", "close", "volume", "adj close", "adjclose"]:
        if candidate in lower_map:
            current = lower_map[candidate]
            standard = candidate.title().replace(" ", "")
            # Falls nur Adj Close vorhanden ist → als Close nutzen
            if standard in ["Adjclose", "AdjClose"] and "Close" not in df.columns:
                rename_map[current] = "Close"
            else:
                rename_map[current] = standard
    if rename_map:
        df = df.rename(columns=rename_map)

    # Letzte Absicherung: irgendeine Spalte, die 'close' enthält
    if "Close" not in df.columns:
        candidates = [c for c in df.columns if "close" in c.lower()]
        if candidates:
            df = df.rename(columns={candidates[0]: "Close"})
        else:
            raise KeyError(f"Keine 'Close'-Spalte gefunden. Vorhandene Spalten: {list(df.columns)}")

    keep = [c for c in ["Open", "High", "Low", "Close", "Volume"] if c in df.columns]
    if not keep:
        # Falls irgendwas schief lief, zumindest Close behalten
        keep = ["Close"]
    return df[keep]


def add_moving_average(data: pd.DataFrame, window: int = 20) -> pd.DataFrame:
    if "Close" not in data.columns:
        raise KeyError(f"'Close' fehlt. Spalten: {list(data.columns)}")
    data[f"MA{window}"] = data["Close"].rolling(window=window).mean()
    return data


def plot_stock(data: pd.DataFrame, ticker: str = "AAPL") -> None:
    plt.figure(figsize=(12, 6))
    plt.plot(data.index, data["Close"], label=f"{ticker} Close", linewidth=2)

    ma_cols = [c for c in data.columns if isinstance(c, str) and c.startswith("MA")]
    for col in ma_cols:
        plt.plot(data.index, data[col], label=col, linestyle="--")

    plt.title(f"{ticker} – Stock Price mit Moving Averages")
    plt.xlabel("Date")
    plt.ylabel("Price")
    plt.legend()
    plt.grid(True, linestyle="--", alpha=0.6)
    plt.tight_layout()
    plt.show()


def main():
    # Interaktive Eingabe (mit Defaults)
    try:
        ticker = input("Enter stock ticker (default: AAPL): ").strip().upper() or "AAPL"
    except EOFError:
        ticker = "AAPL"
    try:
        days_in = input("Enter number of past days (default: 180): ").strip() or "180"
        days = int(days_in)
        if days <= 0:
            raise ValueError
    except (ValueError, EOFError):
        print("Ungültige Zahl – verwende 180.")
        days = 180

    print(f"\nFetching {ticker} data for last {days} days...\n")
    try:
        data = fetch_stock_data(ticker, days)
    except Exception as e:
        print(f"Fehler beim Laden: {e}")
        sys.exit(1)

    # Moving Averages hinzufügen
    data = add_moving_average(data, 20)
    data = add_moving_average(data, 50)

    # CSV speichern
    csv_name = f"{ticker}_stock.csv"
    data.to_csv(csv_name)
    print(f"Data saved to {csv_name}")

    # Optionales Debug (auskommentiert lassen, falls du mal schauen willst)
    # print("Spalten:", list(data.columns))
    # print(data.head())

    # Plot anzeigen
    plot_stock(data, ticker)


if __name__ == "__main__":
    main()
